name: Playwright Tests

on:
  workflow_dispatch:
    inputs:
      margin_issue:
        description: 'Set margin issue to true or false'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      VITE_MARGIN_ISSUE: ${{ github.event.inputs.margin_issue }}  # use input for changing value

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' 

      # Cache `node_modules` to speed up dependency installation
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            my-vite-app/node_modules
            playwright/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      # If `package-lock.json` hasn't changed, cached dependencies will be reused

      - name: Install dependencies
        run: |
          cd my-vite-app && npm install
          cd ../playwright && npm install

      # Cache Playwright browsers to avoid re-downloading them every run
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('playwright/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-
      # If Playwright browsers are already cached, they wonâ€™t be downloaded again 
          
      - name: Install Playwright Browsers
        run: |
          cd playwright
          npx playwright install --with-deps

      # Kill any processes using port 5173 to prevent conflicts
      - name: Kill any process using port 5173
        run: |
          sudo lsof -t -i:5173 | xargs sudo kill -9 || true

      # Start Vite React app in the background
      - name: Run React app
        run: |
          cd my-vite-app
          npm run dev & npx wait-on http://localhost:5173 --timeout 60000

      - name: Wait for React app to be ready
        run: npx wait-on http://localhost:5173 --timeout 60000

      - name: Run Playwright tests
        id: playwright_tests
        run: |
          cd playwright
          npx playwright test --reporter=json --output=playwright/test-results
        continue-on-error: true # Continue execution even if tests fail 
      
      - name: Check contents of the test results directory
        run: |
          echo "Contents of playwright/test-results:"
          ls -l playwright/test-results
      - name: Check if tests failed
        id: check_test_result
        run: |
          echo "Playwright test result:"
          if [ -f playwright/test-results/result.json ]; then
            cat playwright/test-results/result.json
            failed_tests=$(jq '[.suites[].suites[].specs[].tests[] | select(.results[].status != "passed")] | length' playwright/test-results/result.json)
            if [ "$failed_tests" -gt 0 ]; then
              echo "Some tests failed"
              echo "failed=true" >> $GITHUB_ENV
            else
              echo "All tests passed"
              echo "failed=false" >> $GITHUB_ENV
            fi
          else
            echo "Result file not found"
            exit 1
          fi

      # Set GitHub status to failure if any tests failed
      - name: Set GitHub status to failure
        if: ${{ env.failed == 'true' }}  # Check the failure status from environment variable
        run: |
          echo "Tests failed, setting GitHub status to failure"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state":"failure", "context":"Playwright Tests", "description":"Some tests failed"}' \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}"

      # Set GitHub status to success if all tests passed
      - name: Set GitHub status to success
        if: ${{ env.failed == 'false' }}  # Check the success status from environment variable
        run: |
          echo "Tests passed, setting GitHub status to success"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state":"success", "context":"Playwright Tests", "description":"All tests passed"}' \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}"


      # Cache test results for debugging failed tests
      - name: Cache test results
        uses: actions/cache@v3
        with:
          path: playwright/test-results
          key: ${{ runner.os }}-test-results-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-test-results-
      # If tests fail, results are cached and can be reviewed later 

      # Upload test results as an artifact for debugging in GitHub Actions
      - name: Upload test results
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results
          path: playwright/test-results
